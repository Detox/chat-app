// Generated by LiveScript 1.5.0
/**
 * @package Detox chat app
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  Polymer({
    is: 'detox-chat-app',
    behaviors: [detoxChatApp.behaviors.state],
    created: function(){
      var this$ = this;
      Promise.all([require(['@detox/chat', '@detox/core', '@detox/utils']), this._state_instance_ready]).then(function(arg$){
        var ref$, detoxChat, detoxCore, detoxUtils;
        ref$ = arg$[0], detoxChat = ref$[0], detoxCore = ref$[1], detoxUtils = ref$[2];
        if (!this$._state_instance.get_settings_online()) {
          return;
        }
        detoxChat.ready(function(){
          detoxCore.ready(function(){
            this$._connect_to_the_network(detoxChat, detoxCore, detoxUtils);
          });
        });
      });
    },
    _connect_to_the_network: function(detoxChat, detoxCore, detoxUtils){
      var are_arrays_equal, timeoutSet, ArrayMap, secrets_exchange_statuses, sent_messages_map, reconnects_pending, state, core, chat, this$ = this;
      are_arrays_equal = detoxUtils.are_arrays_equal;
      timeoutSet = detoxUtils.timeoutSet;
      ArrayMap = detoxUtils.ArrayMap;
      secrets_exchange_statuses = ArrayMap();
      sent_messages_map = ArrayMap();
      reconnects_pending = ArrayMap();
      /**
       * @param {!Uint8Array} friend_id
       */
      function check_and_add_to_online(friend_id){
        var secrets_exchange_status, nickname, i$, ref$, len$, message;
        secrets_exchange_status = secrets_exchange_statuses.get(friend_id);
        if (secrets_exchange_status.received && secrets_exchange_status.sent) {
          state.add_online_contact(friend_id);
          nickname = state.get_nickname();
          if (nickname) {
            chat.nickname(friend_id, nickname);
          }
          for (i$ = 0, len$ = (ref$ = state.get_contact_messages_to_be_sent(friend_id)).length; i$ < len$; ++i$) {
            message = ref$[i$];
            send_message(friend_id, message);
          }
        }
      }
      /**
       * @param {!Uint8Array}	friend_id
       * @param {!Object}		message
       */
      function send_message(friend_id, message){
        var date_sent;
        date_sent = chat.text_message(friend_id, message.date_written, message.text);
        if (!sent_messages_map.has(friend_id)) {
          sent_messages_map.set(friend_id, new Map);
        }
        sent_messages_map.get(friend_id).set(date_sent, message.id);
      }
      /**
       * @param {!Uint8Array} friend_id
       */
      function do_reconnect_if_needed(friend_id){
        var reconnect_pending, i$, ref$, len$, ref1$, reconnection_trial, time_before_next_attempt;
        if (!state.get_contact_messages_to_be_sent(friend_id).length) {
          return;
        }
        if (!reconnects_pending.has(friend_id)) {
          reconnects_pending.set(friend_id, {
            trial: 0,
            timeout: null
          });
        }
        reconnect_pending = reconnects_pending.get(friend_id);
        if (reconnect_pending.timeout) {
          return;
        }
        ++reconnect_pending.trial;
        for (i$ = 0, len$ = (ref$ = state.get_settings_reconnects_intervals()).length; i$ < len$; ++i$) {
          ref1$ = ref$[i$], reconnection_trial = ref1$[0], time_before_next_attempt = ref1$[1];
          if (reconnect_pending.trial <= reconnection_trial) {
            reconnect_pending.timeout = timeoutSet(time_before_next_attempt, fn$);
            break;
          }
        }
        function fn$(){
          reconnect_pending.timeout = null;
          chat.connect_to(friend_id, new Uint8Array(0));
        }
      }
      state = this._state_instance;
      core = detoxCore.Core(detoxCore.generate_seed(), state.get_settings_bootstrap_nodes(), state.get_settings_ice_servers(), state.get_settings_packets_per_second(), state.get_settings_bucket_size()).once('ready', function(){
        state.set_online(true);
        if (state.get_settings_announce()) {
          chat.announce();
        }
      });
      chat = detoxChat.Chat(core, state.get_seed(), state.get_settings_number_of_introduction_nodes(), state.get_settings_number_of_intermediate_nodes()).once('announced', function(){
        state.set_announced(true);
      }).on('introduction', function(friend_id, secret){
        var contact;
        contact = state.get_contact(friend_id);
        if (!contact) {
          return true;
        } else if (secret.length === 0 && !contact.local_secret) {
          return true;
        } else if (secret['else']) {
          return false;
        }
      }).on('connected', function(friend_id){
        var reconnect_pending;
        if (reconnects_pending.has(friend_id)) {
          reconnect_pending = reconnects_pending.get(friend_id);
          if (reconnect_pending.timeout) {
            clearTimeout(reconnect_pending.timeout);
          }
          reconnects_pending['delete'](friend_id);
        }
        if (!state.has_contact(friend_id)) {
          return;
        }
        secrets_exchange_statuses.set(friend_id, {
          received: false,
          sent: false
        });
        chat.secret(friend_id, detoxChat.generate_secret());
      }).on('connection_failed', function(friend_id){
        do_reconnect_if_needed(friend_id);
      }).on('secret', function(friend_id, secret){
        secrets_exchange_statuses.get(friend_id).received = true;
        check_and_add_to_online(friend_id);
      }).on('secret_received', function(friend_id){
        secrets_exchange_statuses.get(friend_id).sent = true;
        check_and_add_to_online(friend_id);
      }).on('nickname', function(friend_id, nickname){
        state.set_contact_nickname(friend_id, nickname);
      }).on('text_message', function(friend_id, date_written, date_sent, text_message){
        state.add_contact_message(friend_id, true, date_written, date_sent, text_message);
      }).on('text_message_received', function(friend_id, date_sent){
        var id, ref$;
        id = (ref$ = sent_messages_map.get(friend_id)) != null ? ref$.get(date_sent) : void 8;
        if (id) {
          sent_messages_map.get(friend_id)['delete'](date_sent);
          state.set_contact_message_sent(friend_id, id, date_sent);
        }
      }).on('disconnected', function(friend_id){
        secrets_exchange_statuses['delete'](friend_id);
        sent_messages_map['delete'](friend_id);
        state.del_online_contact(friend_id);
        do_reconnect_if_needed(friend_id);
      });
      state.on('contact_added', function(new_contact){
        chat.connect_to(new_contact.id, new Uint8Array(0));
      }).on('contact_message_added', function(friend_id, message){
        if (message.from || message.date_received || !state.has_online_contact(friend_id)) {
          do_reconnect_if_needed(friend_id);
          return;
        }
        send_message(friend_id, message);
      });
      this._core_instance = core;
      this._chat_instance = chat;
    }
  });
}).call(this);
