// Generated by LiveScript 1.5.0
/**
 * @package Detox chat app
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  Polymer({
    is: 'detox-chat-app-sidebar-contacts',
    behaviors: [detoxChatApp.behaviors.state],
    properties: {
      contacts: Array,
      contacts_requests: {
        type: Array,
        value: []
      },
      online_contacts: {
        type: Object
      },
      ui_active_contact: {
        type: Object
      }
    },
    ready: function(){
      var this$ = this;
      Promise.all([require(['@detox/utils']), this._state_instance_ready]).then(function(arg$){
        var detoxUtils, ArraySet, state;
        detoxUtils = arg$[0][0];
        ArraySet = detoxUtils.ArraySet;
        state = this$._state_instance;
        this$.contacts = state.get_contacts();
        this$.online_contacts = ArraySet(state.get_online_contacts());
        this$.contacts_requests = state.get_contacts_requests();
        this$.ui_active_contact = ArraySet([state.get_ui_active_contact() || new Uint8Array(0)]);
        state.on('contacts_changed', function(){
          this$.contacts = state.get_contacts();
        }).on('online_contacts_changed', function(){
          this$.online_contacts = ArraySet(state.get_online_contacts());
        }).on('contacts_requests_changed', function(){
          var contacts_requests;
          contacts_requests = state.get_contacts_requests();
          this$.contacts_requests = contacts_requests;
        }).on('ui_active_contact_changed', function(){
          this$.ui_active_contact = ArraySet([state.get_ui_active_contact() || new Uint8Array(0)]);
        });
      });
    },
    _add_contact: function(){
      var content, modal, ref$, name, id_base58, this$ = this;
      content = "<csw-form>\n	<form>\n		<label>\n			<csw-textarea>\n				<textarea id=\"id\" placeholder=\"ID\"></textarea>\n			</csw-textarea>\n		</label>\n		<label>\n			<csw-textarea>\n				<textarea id=\"name\" placeholder=\"Name (optional)\"></textarea>\n			</csw-textarea>\n		</label>\n	</form>\n</csw-form>";
      modal = csw.functions.confirm(content, function(){
        var id_base58, name;
        id_base58 = modal.querySelector('#id').value;
        name = modal.querySelector('#name').value;
        require(['@detox/chat', '@detox/crypto', '@detox/utils']).then(function(arg$){
          var detoxChat, detoxCrypto, detoxUtils, ref$, public_key, remote_secret, own_public_key, e;
          detoxChat = arg$[0], detoxCrypto = arg$[1], detoxUtils = arg$[2];
          try {
            ref$ = detoxChat.id_decode(id_base58), public_key = ref$[0], remote_secret = ref$[1];
            own_public_key = detoxCrypto.create_keypair(this$._state_instance.get_seed()).ed25519['public'];
            if (detoxUtils.are_arrays_equal(public_key, own_public_key)) {
              csw.functions.alert('Adding yourself to contacts is not supported');
              return;
            }
            this$._state_instance.add_contact(public_key, name, remote_secret);
          } catch (e$) {
            e = e$;
            csw.functions.notify('Incorrect ID, correct it and try again', 'error', 'right');
            this$._last_add_contact = [name, id_base58];
            this$._add_contact();
          }
        });
      });
      if (this._last_add_contact) {
        ref$ = this._last_add_contact, name = ref$[0], id_base58 = ref$[1];
        delete this._last_add_contact;
        modal.querySelector('#id').value = id_base58;
        modal.querySelector('#name').value = name;
      }
    },
    _set_active_contact: function(e){
      this._state_instance.set_ui_active_contact(e.model.item.id);
    },
    _del_contact: function(e){
      var this$ = this;
      csw.functions.confirm("<h3>Are you sure you want to delete contact <i>" + e.model.item.nickname + "</i>?</h3>", function(){
        this$._state_instance.del_contact(e.model.item.id);
      });
      e.stopPropagation();
    },
    _accept_contact_request: function(e){
      var state, item, content, modal;
      state = this._state_instance;
      item = e.model.item;
      content = "<h3>What do you want to do with contact request from <i>" + item.name + "</i> that used secret <i>" + item.secret_name + "</i>?</h3>\n<csw-button primary><button id=\"accept\">Accept</button></csw-button>\n<csw-button><button id=\"reject\">Reject</button></csw-button>\n<csw-button><button id=\"cancel\">Cancel</button></csw-button>";
      modal = csw.functions.simple_modal(content);
      modal.querySelector('#accept').addEventListener('click', function(){
        state.add_contact(item.id, '', new Uint8Array(0));
        state.del_contact_request(item.id);
        modal.close();
      });
      modal.querySelector('#reject').addEventListener('click', function(){
        state.del_contact_request(item.id);
        modal.close();
      });
      modal.querySelector('#cancel').addEventListener('click', function(){
        modal.close();
      });
    },
    _online: function(contact_id, online_contacts){
      return online_contacts.has(contact_id);
    },
    _selected: function(contact_id, ui_active_contact){
      return ui_active_contact.has(contact_id);
    }
  });
}).call(this);
