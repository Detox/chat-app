// Generated by LiveScript 1.5.0
/**
 * @package Detox chat app
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  Polymer({
    is: 'detox-chat-app-sidebar-settings',
    behaviors: [detoxChatApp.behaviors.state],
    properties: {
      settings_announce: {
        observer: '_settings_announce_changed',
        type: String
      },
      settings_block_contact_requests_for: {
        observer: '_settings_block_contact_requests_for_changed',
        type: Number
      },
      settings_bootstrap_nodes: {
        observer: '_settings_bootstrap_nodes_changed',
        type: Object
      },
      settings_bootstrap_nodes_string: String,
      settings_bucket_size: {
        observer: '_settings_bucket_size_changed',
        type: Number
      },
      settings_ice_servers: {
        observer: '_settings_ice_servers_changed',
        type: Object
      },
      settings_ice_servers_string: String,
      settings_max_pending_segments: {
        observer: '_settings_max_pending_segments_changed',
        type: Number
      },
      settings_number_of_intermediate_nodes: {
        observer: '_settings_number_of_intermediate_nodes_changed',
        type: Number
      },
      settings_number_of_introduction_nodes: {
        observer: '_settings_number_of_introduction_nodes_changed',
        type: Number
      },
      settings_online: {
        observer: '_settings_online_changed',
        type: String
      },
      settings_packets_per_second: {
        observer: '_settings_packets_per_second_changed',
        type: Number
      }
    },
    ready: function(){
      var this$ = this;
      this._state_instance_ready.then(function(){
        var state;
        state = this$._state_instance;
        this$.settings_announce = this$._bool_to_string(state.get_settings_announce());
        this$.settings_block_contact_requests_for = state.get_settings_block_contact_requests_for() / 60 / 60 / 24;
        this$.settings_bootstrap_nodes = state.get_settings_bootstrap_nodes();
        this$.settings_bucket_size = state.get_settings_bucket_size();
        this$.settings_ice_servers = state.get_settings_ice_servers();
        this$.settings_max_pending_segments = state.get_settings_max_pending_segments();
        this$.settings_number_of_intermediate_nodes = state.get_settings_number_of_intermediate_nodes();
        this$.settings_number_of_introduction_nodes = state.get_settings_number_of_introduction_nodes();
        this$.settings_online = this$._bool_to_string(state.get_settings_online());
        this$.settings_packets_per_second = state.get_settings_packets_per_second();
        state.on('settings_announce_changed', function(new_settings_announce){
          new_settings_announce = this$._bool_to_string(new_settings_announce);
        }).on('settings_block_contact_requests_for_changed', function(block_contact_requests_for){
          this$.block_contact_requests_for = block_contact_requests_for / 60 / 60 / 24;
        }).on('settings_bootstrap_nodes_changed', function(settings_bootstrap_nodes){
          this$.settings_bootstrap_nodes = settings_bootstrap_nodes;
        }).on('settings_bucket_size_changed', function(settings_bucket_size){
          this$.settings_bucket_size = settings_bucket_size;
        }).on('settings_ice_servers_changed', function(settings_ice_servers){
          this$.settings_ice_servers = settings_ice_servers;
        }).on('settings_max_pending_segments_changed', function(settings_max_pending_segments){
          this$.settings_max_pending_segments = settings_max_pending_segments;
        }).on('settings_number_of_intermediate_nodes_changed', function(settings_number_of_intermediate_nodes){
          this$.settings_number_of_intermediate_nodes = settings_number_of_intermediate_nodes;
        }).on('settings_number_of_introduction_nodes_changed', function(settings_number_of_introduction_nodes){
          this$.settings_number_of_introduction_nodes = settings_number_of_introduction_nodes;
        }).on('settings_online_changed', function(new_settings_online){
          new_settings_online = this$._bool_to_string(new_settings_online);
        }).on('settings_packets_per_second_changed', function(settings_packets_per_second){
          this$.settings_packets_per_second = settings_packets_per_second;
        });
      });
    },
    _bool_to_string: function(value){
      if (value) {
        return '1';
      } else {
        return '0';
      }
    },
    _settings_announce_changed: function(){
      if (this.settings_announce !== this._bool_to_string(this._state_instance.get_settings_announce())) {
        this._state_instance.set_settings_announce(this.settings_announce === '1');
        csw.functions.notify('Saved changes to announcement setting', 'success', 'right', 3);
      }
    },
    _help_settings_announce: function(){
      var content;
      content = "<p>Announcement is a process of publishing own contact information to the network, so that contacts can find and connect to this node.</p>\n<p>It is possible to use Detox Chat without announcing itself to the network.<br>\nIn this case incoming connections from contacts will not be possible, but it will be possible to initiate connection to other contacts if needed.</p>";
      csw.functions.simple_modal(content);
    },
    _settings_block_contact_requests_for_changed: function(){
      var settings_block_contact_requests_for;
      settings_block_contact_requests_for = this.settings_block_contact_requests_for * 60 * 60 * 24;
      if (settings_block_contact_requests_for !== this._state_instance.get_settings_block_contact_requests_for()) {
        this._state_instance.set_settings_block_contact_requests_for(settings_block_contact_requests_for);
        csw.functions.notify('Saved changes to block contacts request for setting', 'success', 'right', 3);
      }
    },
    _help_settings_block_contact_requests_for: function(){
      var content;
      content = "<p>When you reject contact request, nothing is sent back to that contact.<br>\nThis results in subsequent contacts requests being received even after rejection.</p>\n<p>This option makes your life better by blocking subsequent contacts requests after first rejection for some time, so that you're not annoyed by the same contact request all the time.<br>\nChanging this option will not affect already blocked contacts requests.</p>";
      csw.functions.simple_modal(content);
    },
    _settings_bootstrap_nodes_changed: function(settings_bootstrap_nodes){
      this.settings_bootstrap_nodes_string = JSON.stringify(settings_bootstrap_nodes, null, '  ');
    },
    _settings_bootstrap_nodes_blur: function(){
      var settings_bootstrap_nodes, e;
      try {
        settings_bootstrap_nodes = JSON.parse(this.settings_bootstrap_nodes_string);
        if (JSON.stringify(this.settings_bootstrap_nodes) === JSON.stringify(settings_bootstrap_nodes)) {
          return;
        }
        this._state_instance.set_settings_bootstrap_nodes(settings_bootstrap_nodes);
        csw.functions.notify('Saved changes to bootstrap nodes setting', 'success', 'right', 3);
      } catch (e$) {
        e = e$;
        csw.functions.notify('Bootstrap nodes syntax error, changes were not saved', 'error', 'right', 3);
      }
    },
    _help_settings_bootstrap_nodes: function(){
      var content;
      content = "<p>Bootstrap nodes are special kind of nodes used during application startup in order to get information about other nodes in the network and establish initial connections with them.<br>\nThese nodes are crucial for operation and should be selected carefully.<br>\nBootstrap nodes that return misleading information cause anything from drastic reduction of anonymity to being unable to communicate with other nodes in the network.<br>\nDo not change this setting unless you know what you're doing.</p>";
      csw.functions.simple_modal(content);
    },
    _settings_bucket_size_changed: function(){
      if (this.settings_bucket_size !== this._state_instance.get_settings_bucket_size()) {
        this._state_instance.set_settings_bucket_size(this.settings_bucket_size);
        csw.functions.notify('Saved changes to bucket size setting', 'success', 'right', 3);
      }
    },
    _help_settings_bucket_size: function(){
      var content;
      content = "<p>Bucket size is a data structure used in underlying Distributed Hash Table (DHT) implementation used in Detox network.</p>\n<p>Bigger number means more nodes will be stored, but this will also increase communication overhead.<br>\nDo not change this setting unless you know what you're doing.</p>";
      csw.functions.simple_modal(content);
    },
    _settings_ice_servers_changed: function(settings_ice_servers){
      this.settings_ice_servers_string = JSON.stringify(settings_ice_servers, null, '  ');
    },
    _settings_ice_servers_blur: function(){
      var settings_ice_servers, e;
      try {
        settings_ice_servers = JSON.parse(this.settings_ice_servers_string);
        if (JSON.stringify(this.settings_ice_servers) === JSON.stringify(settings_ice_servers)) {
          return;
        }
        this._state_instance.set_settings_ice_servers(settings_ice_servers);
        csw.functions.notify('Saved changes to ICE servers setting', 'success', 'right', 3);
      } catch (e$) {
        e = e$;
        csw.functions.notify('ICE servers syntax error, changes were not saved', 'error', 'right', 3);
      }
    },
    _help_settings_ice_servers: function(){
      var content;
      content = "<p>ICE servers are used during connections to other nodes in the network.</p>\n<p>There are two kinds of ICE servers: STUN and TURN.<br>\nSTUN helps to figure out how to connect to this node from the outside if it is behind Network Address Translation (NAT) or firewall.<br>\nIf connection is not possible, TURN server can act as relay to enable communication even behind restricted NAT or firewall.</p>\n<p>Most of the time ICE servers are crucial for operation and should be selected carefully.<br>\nDo not change this setting unless you know what you're doing.</p>";
      csw.functions.simple_modal(content);
    },
    _settings_max_pending_segments_changed: function(){
      if (this.settings_max_pending_segments !== this._state_instance.get_settings_max_pending_segments()) {
        this._state_instance.set_settings_max_pending_segments(this.settings_max_pending_segments);
        csw.functions.notify('Saved changes to max pending segments setting', 'success', 'right', 3);
      }
    },
    _help_settings_max_pending_segments: function(){
      var content;
      content = "<p>Pending segments is a low-level state of segments from transport layer of Detox network implementation that appear during routing paths construction.</p>\n<p>Do not change this setting unless you know what you're doing.</p>";
      csw.functions.simple_modal(content);
    },
    _settings_number_of_intermediate_nodes_changed: function(){
      if (this.settings_number_of_intermediate_nodes !== this._state_instance.get_settings_number_of_intermediate_nodes()) {
        this._state_instance.set_settings_number_of_intermediate_nodes(this.settings_number_of_intermediate_nodes);
        csw.functions.notify('Saved changes to number of intermediate nodes setting', 'success', 'right', 3);
      }
    },
    _help_settings_number_of_intermediate_nodes: function(){
      var content;
      content = "<p>Intermediate nodes are nodes between this node and interested target node, used for routing paths creation in transport layer of Detox network implementation.</p>\n<p>More intermediate nodes means longer routing path and slower its creation. Lower numbers decrease anonymity, numbers higher than 3 are generally considered to be redundant.<br>\nDo not change this setting unless you know what you're doing.</p>";
      csw.functions.simple_modal(content);
    },
    _settings_number_of_introduction_nodes_changed: function(){
      if (this.settings_number_of_introduction_nodes !== this._state_instance.get_settings_number_of_introduction_nodes()) {
        this._state_instance.set_settings_number_of_introduction_nodes(this.settings_number_of_introduction_nodes);
        csw.functions.notify('Saved changes to number of introduction nodes setting', 'success', 'right', 3);
      }
    },
    _help_settings_number_of_introduction_nodes: function(){
      var content;
      content = "<p>Introduction nodes are nodes to which announcement is made.</p>\n<p>More than one node is recommended to ensure good reliability of incoming connections, but very high numbers are redundant.<br>\nDo not change this setting unless you know what you're doing.</p>";
      csw.functions.simple_modal(content);
    },
    _settings_online_changed: function(){
      if (this.settings_online !== this._bool_to_string(this._state_instance.get_settings_online())) {
        this._state_instance.set_settings_online(this.settings_online === '1');
        csw.functions.notify('Saved changes to online setting', 'success', 'right', 3);
      }
    },
    _help_settings_online: function(){
      var content;
      content = "<p>If not online then on next start application will not try to connect to Detox network and related functionality will not work properly.</p>";
      csw.functions.simple_modal(content);
    },
    _settings_packets_per_second_changed: function(){
      if (this.settings_packets_per_second !== this._state_instance.get_settings_packets_per_second()) {
        this._state_instance.set_settings_packets_per_second(this.settings_packets_per_second);
        csw.functions.notify('Saved changes to packets per second setting', 'success', 'right', 3);
      }
    },
    _help_settings_packets_per_second: function(){
      var content;
      content = "<p>Detox network sends data at fixed rate on each opened connection regardless of how much bandwidth is actually utilized, this option specifies how may packets of 512 bytes will be sent on each link during one second.</p>\n<p>Bigger number means higher peak throughput and lower latencies (to some degree, as these can be bottlenecked by other nodes in particular routing path), but significantly increases requirements to Internet connection.<br>\nYou may increase or decrease this option slightly, but don't go too far unless you know what you're doing.</p>";
      csw.functions.simple_modal(content);
    }
  });
}).call(this);
