/**
 * @package Detox chat app
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
// Generated by LiveScript 1.5.0
(function(){
  var IN_APP, ref$, desktop_notification_permission_requested, x$, slice$ = [].slice, arrayFrom$ = Array.from || function(x){return slice$.call(x);};
  IN_APP = location.search === '?home';
  /**
   * Force passive listeners on in Polymer
   */
  Polymer.setPassiveTouchGestures(true);
  /**
   * Register service worker
   */
  if ('serviceWorker' in navigator && window.detox_sw_path) {
    require(['@detox/chat']).then(function(arg$){
      var detoxChat, this$ = this;
      detoxChat = arg$[0];
      detoxChat.ready(function(){
        navigator.serviceWorker.register(detox_sw_path).then(function(registration){
          registration.onupdatefound = function(){
            var installingWorker;
            installingWorker = registration.installing;
            installingWorker.onstatechange = function(){
              switch (installingWorker.state) {
              case 'installed':
                if (navigator.serviceWorker.controller) {
                  if (IN_APP) {
                    detox_chat_app.notify_success('Application was updated in background and new version ready to be used, restart to enjoy it', 10);
                  } else {
                    detox_chat_app.notify_success('Website was updated in background and new version ready to be used, refresh page to enjoy it', 10);
                  }
                } else {
                  if (IN_APP) {
                    detox_chat_app.notify_success('Application is ready to work offline', 10);
                  } else {
                    detox_chat_app.notify_success('Website is ready to work offline', 10);
                  }
                }
                break;
              case 'redundant':
                console.error('The installing service worker became redundant');
              }
            };
          };
        })['catch'](function(e){
          console.error('Error during service worker registration:', e);
        });
      });
    });
  }
  /**
   * Requesting persistent storage, so that data will not be lost unexpectedly under storage pressure
   */
  if ((ref$ = navigator.storage) != null && ref$.persist) {
    navigator.storage.persisted().then(function(persistent){
      if (!persistent) {
        console.info('Persistent storage is not yet granted, requesting...');
        navigator.storage.persist().then(function(granted){
          if (granted) {
            console.info('Persistent storage granted');
          } else {
            console.warn('Persistent storage denied, data may be lost under storage pressure');
          }
        });
      }
    });
  } else {
    console.warn('Persistent storage not supported, data may be lost under storage pressure');
  }
  desktop_notification_permission_requested = false;
  /**
   * @param {string}		status
   * @param {string}		title
   * @param {string=}		details
   * @param {number=}		timeout
   * @param {!Function}	onclick
   */
  function page_notification(status, title, details, timeout, onclick){
    var body, notification;
    body = document.createElement('div');
    if (details) {
      body.innerHTML = '<b></b><br>';
      body.querySelector('b').textContent = title;
      body.insertAdjacentText('beforeend', details);
    } else {
      body.insertAdjacentText('beforeend', title);
    }
    notification = csw.functions.notify(body, status, 'right', timeout);
    if (onclick) {
      notification.addEventListener('click', onclick);
    }
  }
  /**
   * @param {string}		title
   * @param {string=}		details
   * @param {number=}		timeout
   * @param {!Function}	onclick
   */
  function desktop_notification(title, details, timeout, onclick){
    var notification;
    notification = new Notification(title, {
      body: details
    });
    if (onclick) {
      notification.addEventListener('click', onclick);
    }
    if (timeout) {
      setTimeout(function(){
        notification.close();
      }, 1000 * timeout);
    }
  }
  /**
   * @param {string}	status
   * @param {string}	title
   * @param {string=}	details
   * @param {string=}	timeout
   *
   * @return {!Promise}
   */
  function notify(status, title, details, timeout){
    return new Promise(function(resolve){
      var desktop_notification_permission_requested, message, x$;
      if (typeof details === 'number') {
        timeout = details;
        details = '';
      }
      if (document.hasFocus() || !Notification || Notification.permission === 'denied') {
        page_notification(status, title, details, timeout, resolve);
      } else if (Notification.permission === 'default') {
        if (!desktop_notification_permission_requested) {
          desktop_notification_permission_requested = true;
          if (IN_APP) {
            message = "Application tried to show you a system notification while was inactive, but you have to grant permission for that first, do that after clicking on this notification";
          } else {
            message = "Website tried to show you a desktop notification while was inactive, but you have to grant permission for that first, do that after clicking on this notification";
          }
          x$ = csw.functions.notify(message, 'warning', 'right');
          x$.addEventListener('click', function(){
            Notification.requestPermission().then(function(permission){
              switch (permission) {
              case 'granted':
                csw.functions.notify('You will no longer miss important notifications ðŸ˜‰', 'success', 'right', 3);
                break;
              case 'denied':
                csw.functions.notify('In case you change your mind, desktop notifications can be re-enabled in browser settings ðŸ˜‰', 'success', 'right', 5);
              }
            });
          });
        }
        page_notification(status, title, details, timeout, resolve);
      } else {
        desktop_notification(title, details, timeout, resolve);
      }
    });
  }
  x$ = window.detox_chat_app || (window.detox_chat_app = {});
  x$.notify_error = function(){
    return notify.apply(null, ['error'].concat(arrayFrom$(arguments)));
  };
  x$.notify = function(){
    return notify.apply(null, [''].concat(arrayFrom$(arguments)));
  };
  x$.notify_success = function(){
    return notify.apply(null, ['success'].concat(arrayFrom$(arguments)));
  };
  x$.notify_warning = function(){
    return notify.apply(null, ['warning'].concat(arrayFrom$(arguments)));
  };
}).call(this);
