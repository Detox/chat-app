// Generated by LiveScript 1.5.0
/**
 * @package Detox chat app
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  function Wrapper(asyncEventer){
    var global_state;
    global_state = Object.create(null);
    function State(name, initial_state){
      var x$, i$, ref$, len$, secret, contact, j$, ref1$, len1$, this$ = this;
      if (!(this instanceof State)) {
        return new State(name, initial_state);
      }
      asyncEventer.call(this);
      if (!initial_state) {
        initial_state = localStorage.getItem(name);
        initial_state = initial_state
          ? JSON.parse(initial_state)
          : Object.create(null);
      }
      this._state = initial_state;
      this._local_state = {
        online: false,
        announced: false
      };
      if (!('version' in this._state)) {
        x$ = this._state;
        x$['version'] = 0;
        x$['name'] = '';
        x$['seed'] = null;
        x$['settings'] = {
          'announce_myself': true
        };
        x$['secrets'] = [];
        x$['contacts'] = [];
      }
      if (this._state['seed']) {
        this._state['seed'] = Uint8Array.from(this._state['seed']);
      }
      for (i$ = 0, len$ = (ref$ = this._state['secrets']).length; i$ < len$; ++i$) {
        secret = ref$[i$];
        secret['secret'] = Uint8Array.from(secret['secret']);
      }
      for (i$ = 0, len$ = (ref$ = this._state['contacts']).length; i$ < len$; ++i$) {
        contact = ref$[i$];
        contact['public_key'] = Uint8Array.from(contact['public_key']);
        for (j$ = 0, len1$ = (ref1$ = contact['secrets']).length; j$ < len1$; ++j$) {
          secret = ref1$[j$];
          secret['secret'] = Uint8Array.from(secret['secret']);
        }
      }
      this._ready = new Promise(function(resolve){
        if (this$._state['seed']) {
          resolve();
        } else {
          this$._ready_resolve = resolve;
        }
      });
    }
    State.prototype = {
      /**
       * @param {Function} callback Callback to be executed once state is ready
       *
       * @return {boolean} Whether state is ready
       */
      'ready': function(callback){
        if (callback) {
          this._ready.then(callback);
        }
        return Boolean(this._state['seed']);
      }
      /**
       * @return {Uint8Array} Seed if configured or `null` otherwise
       */,
      'get_seed': function(){
        return this._state['seed'];
      }
      /**
       * @param {!Uint8Array} seed
       */,
      'set_seed': function(seed){
        this._state['seed'] = Uint8Array.from(seed);
        if (this._ready_resolve) {
          this._ready_resolve();
          delete this._ready_resolve;
        }
        this['fire']('seed_changed');
      }
      /**
       * @return {Uint8Array} Seed if configured or `null` otherwise
       */,
      'get_name': function(){
        return this._state['name'];
      }
      /**
       * @param {string} name
       */,
      'set_name': function(name){
        this._state['name'] = String(name);
        this['fire']('name_changed');
      }
      /**
       * @return {boolean}
       */,
      'get_online': function(){
        return this._local_state.online;
      }
      /**
       * @param {boolean} online
       */,
      'set_online': function(online){
        this._local_state.online = online;
        this['fire']('online_changed');
      }
      /**
       * @return {boolean}
       */,
      'get_announced': function(){
        return this._local_state.announced;
      }
      /**
       * @param {boolean} announced
       */,
      'set_announced': function(announced){
        this._local_state.announced = announced;
        this['fire']('announced_changed');
      }
      /**
       * @return {boolean}
       */,
      'get_settings_announce_myself': function(){
        return this._state['settings']['announce_myself'];
      }
      /**
       * @param {boolean} announce_myself
       */,
      'set_settings_announce_myself': function(announce_myself){
        this._state['settings']['announce_myself'] = announce_myself;
        this['fire']('settings_announce_myself_changed');
      }
      /**
       * @return {!Array<!Object>}
       */,
      'get_contacts': function(){
        return this._state['contacts'];
      }
    };
    State.prototype = Object.assign(Object.create(asyncEventer.prototype), State.prototype);
    Object.defineProperty(State.prototype, 'constructor', {
      enumerable: false,
      value: State
    });
    return {
      'State': State
      /**
       * @param {string}	name
       * @param {!Object}	initial_state
       *
       * @return {!detoxState}
       */,
      'get_instance': function(name, initial_state){
        if (!(name in global_state)) {
          global_state[name] = State(initial_state);
        }
        return global_state[name];
      }
    };
  }
  define(['async-eventer'], Wrapper);
}).call(this);
