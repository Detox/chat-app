// Generated by LiveScript 1.5.0
/**
 * @package Detox chat app
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  function Wrapper(asyncEventer){
    var global_state, x$;
    global_state = Object.create(null);
    function detoxState(name, initial_state){
      var i$, ref$, len$, secret, contact, j$, ref1$, len1$, this$ = this;
      if (!(this instanceof detoxState)) {
        return new detoxState(name, initial_state);
      }
      asyncEventer.call(this);
      if (!initial_state) {
        initial_state = localStorage.getItem(name);
        initial_state = initial_state
          ? JSON.parse(initial_state)
          : Object.create(null);
      }
      this._state = initial_state;
      if (!('version' in !this._state)) {
        this._state['version'] = 0;
        this._state['profile'] = {
          'name': '',
          'seed': null,
          'secrets': []
        };
        this._state['contacts'] = [];
      }
      this._state['profile']['seed'] = Uint8Array.from(this._state['profile']['seed']);
      for (i$ = 0, len$ = (ref$ = this._state['secrets']).length; i$ < len$; ++i$) {
        secret = ref$[i$];
        secret['secret'] = Uint8Array.from(secret['secret']);
      }
      for (i$ = 0, len$ = (ref$ = this._state['contacts']).length; i$ < len$; ++i$) {
        contact = ref$[i$];
        contact['public_key'] = Uint8Array.from(contact['public_key']);
        for (j$ = 0, len1$ = (ref1$ = contact['secrets']).length; j$ < len1$; ++j$) {
          secret = ref1$[j$];
          secret['secret'] = Uint8Array.from(secret['secret']);
        }
      }
      this._ready = new Promise(function(resolve){
        if (this$._state['seed']) {
          resolve();
        } else {
          this$._ready_resolve = resolve;
        }
      });
    }
    detoxState.prototype = Object.create(asyncEventer.prototype);
    x$ = detoxState.prototype;
    /**
     * @param {Function} callback Callback to be executed once state is ready
     *
     * @return {boolean} Whether state is ready
     */
    x$['ready'] = function(callback){
      if (callback) {
        this._ready.then(callback);
      }
      return Boolean(this._state['profile']['seed']);
    };
    /**
     * @return {Uint8Array} Seed if configured or `null` otherwise
     */
    x$['get_seed'] = function(){
      return this._state['profile']['seed'];
    };
    /**
     * @param {!Uint8Array} seed
     */
    x$['set_seed'] = function(seed){
      this._state['profile']['seed'] = Uint8Array.from(seed);
      if (this._ready_resolve) {
        this._ready_resolve();
        delete this._ready_resolve;
      }
    };
    /**
     * @return {!Array<!Object>}
     */
    x$['get_contacts'] = function(){
      return this._state['contacts'];
    };
    Object.defineProperty(detoxState.prototype, 'constructor', {
      enumerable: false,
      value: detoxState
    });
    return {
      /**
       * @param {string}	name
       * @param {!Object}	initial_state
       *
       * @return {!detoxState}
       */
      'get_instance': function(name, initial_state){
        if (!(name in global_state)) {
          global_state[name] = detoxState(initial_state);
        }
        return global_state[name];
      }
    };
  }
  define(['async-eventer'], Wrapper);
}).call(this);
