// Generated by LiveScript 1.5.0
/**
 * @package Detox chat app
 * @author  Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @license 0BSD
 */
(function(){
  function Wrapper(detoxUtils, asyncEventer){
    var are_arrays_equal, ArrayMap, ArraySet, global_state;
    are_arrays_equal = detoxUtils['are_arrays_equal'];
    ArrayMap = detoxUtils['ArrayMap'];
    ArraySet = detoxUtils['ArraySet'];
    global_state = Object.create(null);
    /**
     * @constructor
     */
    function State(name, initial_state){
      var x$, i$, ref$, len$, secret, contact, this$ = this;
      if (!(this instanceof State)) {
        return new State(name, initial_state);
      }
      asyncEventer.call(this);
      if (!initial_state) {
        initial_state = localStorage.getItem(name);
        initial_state = initial_state
          ? JSON.parse(initial_state)
          : Object.create(null);
      }
      this._state = initial_state;
      this._local_state = {
        online: false,
        announced: false,
        messages: ArrayMap(),
        ui: {
          active_contact: null
        },
        online_contacts: ArraySet()
      };
      if (!('version' in this._state)) {
        x$ = this._state;
        x$['version'] = 0;
        x$['nickname'] = '';
        x$['seed'] = null;
        x$['settings'] = {
          'announce': true
        };
        x$['secrets'] = [];
        x$['contacts'] = [[[6, 148, 79, 1, 76, 156, 177, 211, 195, 184, 108, 220, 189, 121, 140, 15, 134, 174, 141, 222, 146, 77, 20, 115, 211, 253, 148, 149, 128, 147, 190, 125], 'Fake contact', 0, 0]];
      }
      if (this._state['seed']) {
        this._state['seed'] = Uint8Array.from(this._state['seed']);
      }
      for (i$ = 0, len$ = (ref$ = this._state['secrets']).length; i$ < len$; ++i$) {
        secret = ref$[i$];
        secret['secret'] = Uint8Array.from(secret['secret']);
      }
      this._state['contacts'] = ArrayMap((function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = this._state['contacts']).length; i$ < len$; ++i$) {
          contact = ref$[i$];
          contact = Contact(contact);
          results$.push([contact['id'], contact]);
        }
        return results$;
      }.call(this)));
      this._local_state.messages.set(Array.from(this._state['contacts'].keys())[0], [Message([true, +new Date, 'Received message']), Message([false, +new Date, 'Sent message'])]);
      this._ready = new Promise(function(resolve){
        if (this$._state['seed']) {
          resolve();
        } else {
          this$._ready_resolve = resolve;
        }
      });
    }
    State.prototype = {
      /**
       * @param {Function} callback Callback to be executed once state is ready
       *
       * @return {boolean} Whether state is ready
       */
      'ready': function(callback){
        if (callback) {
          this._ready.then(callback);
        }
        return Boolean(this._state['seed']);
      }
      /**
       * @return {Uint8Array} Seed if configured or `null` otherwise
       */,
      'get_seed': function(){
        return this._state['seed'];
      }
      /**
       * @param {!Uint8Array} seed
       */,
      'set_seed': function(seed){
        var old_seed, new_seed;
        old_seed = this._state['seed'];
        new_seed = Uint8Array.from(seed);
        this._state['seed'] = new_seed;
        if (this._ready_resolve) {
          this._ready_resolve();
          delete this._ready_resolve;
        }
        this['fire']('seed_changed', new_seed, old_seed);
      }
      /**
       * @return {Uint8Array} Seed if configured or `null` otherwise
       */,
      'get_nickname': function(){
        return this._state['nickname'];
      }
      /**
       * @param {string} nickname
       */,
      'set_nickname': function(nickname){
        var old_nickname, new_nickname;
        old_nickname = this._state['nickname'];
        new_nickname = String(nickname);
        this._state['nickname'] = new_nickname;
        this['fire']('nickname_changed', new_nickname, old_nickname);
      }
      /**
       * @return {boolean}
       */,
      'get_online': function(){
        return this._local_state.online;
      }
      /**
       * @param {boolean} online
       */,
      'set_online': function(online){
        var old_online, new_online;
        old_online = this._local_state.online;
        new_online = !!online;
        this._local_state.online = new_online;
        this['fire']('online_changed', new_online, old_online);
      }
      /**
       * @return {boolean}
       */,
      'get_announced': function(){
        return this._local_state.announced;
      }
      /**
       * @param {boolean} announced
       */,
      'set_announced': function(announced){
        var old_announced, new_announced;
        old_announced = this._local_state.announced;
        new_announced = !!announced;
        this._local_state.announced = new_announced;
        this['fire']('announced_changed', new_announced, old_announced);
      }
      /**
       * @return {boolean}
       */,
      'get_ui_active_contact': function(){
        return this._local_state.ui.active_contact;
      }
      /**
       * @param {!Uint8Array} friend_id
       */,
      'set_ui_active_contact': function(friend_id){
        var old_active_contact, new_active_contact;
        old_active_contact = this._local_state.ui.active_contact;
        new_active_contact = Uint8Array.from(friend_id);
        this._local_state.ui.active_contact = new_active_contact;
        this['fire']('ui_active_contact_changed', new_active_contact, old_active_contact);
      }
      /**
       * @return {boolean}
       */,
      'get_settings_announce': function(){
        return this._state['settings']['announce'];
      }
      /**
       * @param {boolean} announce
       */,
      'set_settings_announce': function(announce){
        var old_announce, new_announce;
        old_announce = this._state['settings']['announce'];
        new_announce = !!announce;
        this._state['settings']['announce'] = new_announce;
        this['fire']('settings_announce_changed');
      }
      /**
       * @return {!Contact[]}
       */,
      'get_contacts': function(){
        return Array.from(this._state['contacts'].values());
      }
      /**
       * @param {!Uint8Array}	friend_id
       * @param {string}		nickname
       */,
      'add_contact': function(friend_id, nickname){
        var new_contact;
        if (this._state['contacts'].has(friend_id)) {
          return;
        }
        new_contact = Contact([Uint8Array.from(friend_id), nickname, 0, 0]);
        this._state['contacts'].push(new_contact);
        this['fire']('contact_added', new_contact);
        this['fire']('contacts_changed');
      }
      /**
       * @param {!Uint8Array} friend_id
       */,
      'has_contact': function(friend_id){
        return this._state['contacts'].has(friend_id);
      }
      /**
       * @param {!Uint8Array}	friend_id
       * @param {string}		nickname
       */,
      'set_contact_nickname': function(friend_id, nickname){
        var old_contact, new_contact;
        old_contact = this._state['contacts'].get(friend_id);
        if (!old_contact) {
          return;
        }
        new_contact = old_contact['clone']();
        new_contact['nickname'] = nickname;
        this._state['contacts'].set(friend_id, new_contact);
        this['fire']('contact_updated', new_contact, old_contact);
        this['fire']('contacts_changed');
      }
      /**
       * @param {!Uint8Array} friend_id
       */,
      'del_contact': function(friend_id){
        var old_contact;
        old_contact = this._state['contacts'].get(friend_id);
        if (!old_contact) {
          return;
        }
        this._state['contacts']['delete'](friend_id);
        this['fire']('contact_deleted', contact);
        this['fire']('contacts_changed');
      }
      /**
       * @return {!Uint8Array[]}
       */,
      'get_online_contacts': function(){
        return Array.from(this._local_state.online_contacts);
      }
      /**
       * @param {!Uint8Array} friend_id
       */,
      'add_online_contact': function(friend_id){
        this._local_state.online_contacts.add(friend_id);
        this['fire']('contact_online', friend_id);
        return this['fire']('online_contacts_changed');
      }
      /**
       * @param {!Uint8Array} friend_id
       */,
      'has_online_contact': function(friend_id){
        return this._local_state.online_contacts.has(friend_id);
      }
      /**
       * @param {!Uint8Array} friend_id
       */,
      'del_online_contact': function(friend_id){
        this._local_state.online_contacts['delete'](friend_id);
        this['fire']('contact_offline', friend_id);
        return this['fire']('online_contacts_changed');
      }
      /**
       * @param {!Uint8Array} friend_id
       *
       * @return {!Message[]}
       */,
      'get_contact_messages': function(friend_id){
        return this._local_state.messages.get(friend_id) || [];
      }
      /**
       * @param {!Uint8Array}	friend_id
       * @param {boolean}		from		`true` if message was received and `false` if sent to a friend
       * @param {number}		date
       * @param {string} 		text
       */,
      'add_contact_message': function(friend_id, from, date, text){
        var messages, message;
        if (!this._local_state.messages.has(friend_id)) {
          this._local_state.messages.set(friend_id, []);
        }
        friend_id = Uint8Array.from(friend_id);
        messages = this._local_state.messages.get(friend_id);
        message = Message([from, date, text]);
        messages.push(message);
        this['fire']('contact_message_added', friend_id, message);
        this['fire']('contact_messages_changed', friend_id);
      }
    };
    State.prototype = Object.assign(Object.create(asyncEventer.prototype), State.prototype);
    Object.defineProperty(State.prototype, 'constructor', {
      value: State
    });
    /**
     * @constructor
     */
    function Contact(array){
      if (!(this instanceof Contact)) {
        return new Contact(array);
      }
      array[0] = Uint8Array.from(array[0]);
      this.array = array;
      this['array'] = array;
    }
    Contact.prototype['clone'] = function(){
      return Contact(this.array.slice());
    };
    Object.defineProperty(Contact.prototype, 'id', {
      /**
       * @return {!Uint8Array}
       */
      get: function(){
        return this.array[0];
      }
      /**
       * @param {!Uint8Array} id
       */,
      set: function(id){
        this.array[0] = id;
      }
    });
    Object.defineProperty(Contact.prototype, 'nickname', {
      /**
       * @return {string}
       */
      get: function(){
        return this.array[1];
      }
      /**
       * @param {string} nickname
       */,
      set: function(nickname){
        this.array[1] = nickname;
      }
    });
    Object.defineProperty(Contact.prototype, 'last_time_active', {
      /**
       * @return {number}
       */
      get: function(){
        return this.array[2];
      }
      /**
       * @param {number} last_time_active
       */,
      set: function(last_time_active){
        this.array[2] = last_time_active;
      }
    });
    Object.defineProperty(Contact.prototype, 'last_read_message', {
      /**
       * @return {number}
       */
      get: function(){
        return this.array[3];
      }
      /**
       * @param {number} last_read_message
       */,
      set: function(last_read_message){
        this.array[3] = last_read_message;
      }
    });
    /**
     * @constructor
     */
    function Message(array){
      if (!(this instanceof Message)) {
        return new Message(array);
      }
      this.array = array;
      this['array'] = array;
    }
    Message.prototype['clone'] = function(){
      return Message(this.array.slice());
    };
    Object.defineProperty(Message.prototype, 'from', {
      /**
       * @return {boolean} `true` if message was received and `false` if sent to a friend
       */
      get: function(){
        return this.array[0];
      }
      /**
       * @param {boolean} from
       */,
      set: function(from){
        this.array[0] = from;
      }
    });
    Object.defineProperty(Message.prototype, 'date', {
      /**
       * @return {number}
       */
      get: function(){
        return this.array[1];
      }
      /**
       * @param {number} date
       */,
      set: function(date){
        this.array[1] = date;
      }
    });
    Object.defineProperty(Message.prototype, 'text', {
      /**
       * @return {string}
       */
      get: function(){
        return this.array[2];
      }
      /**
       * @param {string} text
       */,
      set: function(text){
        this.array[2] = text;
      }
    });
    return {
      'Contact': Contact,
      'Message': Message,
      'State': State
      /**
       * @param {string}	name
       * @param {!Object}	initial_state
       *
       * @return {!detoxState}
       */,
      'get_instance': function(name, initial_state){
        if (!(name in global_state)) {
          global_state[name] = State(initial_state);
        }
        return global_state[name];
      }
    };
  }
  define(['@detox/utils', 'async-eventer'], Wrapper);
}).call(this);
